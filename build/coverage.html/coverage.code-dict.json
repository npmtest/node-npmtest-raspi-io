{"/home/travis/build/npmtest/node-npmtest-raspi-io/test.js":"/* istanbul instrument in package npmtest_raspi_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raspi-io/lib.npmtest_raspi_io.js":"/* istanbul instrument in package npmtest_raspi_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_raspi_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_raspi_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-raspi-io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-raspi-io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_raspi_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_raspi_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_raspi_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_raspi_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_raspi_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_raspi_io.__dirname + '/lib.npmtest_raspi_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raspi-io/node_modules/raspi-io/dist/index.js":"'use strict';\n\nvar _raspiIoCore = require('raspi-io-core');\n\nmodule.exports = function RaspiIO() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      includePins = _ref.includePins,\n      excludePins = _ref.excludePins,\n      _ref$enableSoftPwm = _ref.enableSoftPwm,\n      enableSoftPwm = _ref$enableSoftPwm === undefined ? false : _ref$enableSoftPwm,\n      enableSerial = _ref.enableSerial;\n\n  var board = require('raspi-board');\n\n  var platform = {\n    'raspi': require('raspi'),\n    'raspi-board': board,\n    'raspi-gpio': require('raspi-gpio'),\n    'raspi-i2c': require('raspi-i2c'),\n    'raspi-led': require('raspi-led'),\n    'raspi-pwm': require('raspi-pwm')\n  };\n\n  if (typeof enableSerial === 'undefined') {\n    enableSerial = board.getBoardRevision() !== board.VERSION_3_MODEL_B;\n  }\n  if (enableSerial) {\n    platform['raspi-serial'] = require('raspi-serial');\n  }\n\n  if (enableSoftPwm) {\n    platform['raspi-soft-pwm'] = require('raspi-soft-pwm');\n  }\n\n  return new _raspiIoCore.RaspiIOCore({\n    includePins: includePins,\n    excludePins: excludePins,\n    enableSerial: enableSerial,\n    enableSoftPwm: enableSoftPwm,\n    platform: platform\n  });\n}; /*\n   Copyright (c) 2016 Bryan Hughes <bryan@nebri.us>\n   \n   Permission is hereby granted, free of charge, to any person\n   obtaining a copy of this software and associated documentation\n   files (the 'Software'), to deal in the Software without\n   restriction, including without limitation the rights to use,\n   copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the\n   Software is furnished to do so, subject to the following\n   conditions:\n   \n   The above copyright notice and this permission notice shall be\n   included in all copies or substantial portions of the Software.\n   \n   THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n   OTHER DEALINGS IN THE SOFTWARE.\n   */\n\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-raspi-io/node_modules/raspi-io-core/dist/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RaspiIOCore = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('events');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Copyright (c) 2014 Bryan Hughes <bryan@nebri.us>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Permission is hereby granted, free of charge, to any person\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               obtaining a copy of this software and associated documentation\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               files (the 'Software'), to deal in the Software without\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               restriction, including without limitation the rights to use,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               copy, modify, merge, publish, distribute, sublicense, and/or sell\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               copies of the Software, and to permit persons to whom the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Software is furnished to do so, subject to the following\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               conditions:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               The above copyright notice and this permission notice shall be\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               included in all copies or substantial portions of the Software.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nnnnn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\n// Constants\nvar INPUT_MODE = 0;\nvar OUTPUT_MODE = 1;\nvar ANALOG_MODE = 2;\nvar PWM_MODE = 3;\nvar SERVO_MODE = 4;\nvar UNKNOWN_MODE = 99;\n\nvar LOW = 0;\nvar HIGH = 1;\n\nvar LED_PIN = -1;\n\nvar SOFTWARE_PWM_RANGE = 1000;\nvar SOFTWARE_PWM_FREQUENCY = 50;\n\n// Settings\nvar DEFAULT_SERVO_MIN = 1000;\nvar DEFAULT_SERVO_MAX = 2000;\nvar DIGITAL_READ_UPDATE_RATE = 19;\n\n// Private symbols\nvar isReady = Symbol('isReady');\nvar pins = Symbol('pins');\nvar instances = Symbol('instances');\nvar analogPins = Symbol('analogPins');\nvar getPinInstance = Symbol('getPinInstance');\nvar i2c = Symbol('i2c');\nvar i2cDelay = Symbol('i2cDelay');\nvar _i2cRead = Symbol('i2cRead');\nvar i2cCheckAlive = Symbol('i2cCheckAlive');\nvar _pinMode = Symbol('pinMode');\nvar serial = Symbol('serial');\nvar serialQueue = Symbol('serialQueue');\nvar addToSerialQueue = Symbol('addToSerialQueue');\nvar serialPump = Symbol('serialPump');\nvar isSerialProcessing = Symbol('isSerialProcessing');\nvar isSerialOpen = Symbol('isSerialOpen');\n\nvar raspiModule = Symbol('raspiModule');\nvar raspiBoardModule = Symbol('raspiBoardModule');\nvar raspiGpioModule = Symbol('raspiGpioModule');\nvar raspiI2cModule = Symbol('raspiI2cModule');\nvar raspiLedModule = Symbol('raspiLedModule');\nvar raspiPwmModule = Symbol('raspiPwmModule');\nvar raspiSerialModule = Symbol('raspiSerialModule');\nvar raspiSoftPwmModule = Symbol('raspiSoftPwmModule');\n\nvar SERIAL_ACTION_WRITE = 'SERIAL_ACTION_WRITE';\nvar SERIAL_ACTION_CLOSE = 'SERIAL_ACTION_CLOSE';\nvar SERIAL_ACTION_FLUSH = 'SERIAL_ACTION_FLUSH';\nvar SERIAL_ACTION_CONFIG = 'SERIAL_ACTION_CONFIG';\nvar SERIAL_ACTION_READ = 'SERIAL_ACTION_READ';\nvar SERIAL_ACTION_STOP = 'SERIAL_ACTION_STOP';\n\nfunction bufferToArray(buffer) {\n  var array = Array(buffer.length);\n  for (var i = 0; i < buffer.length; i++) {\n    array[i] = buffer[i];\n  }\n  return array;\n}\n\nvar RaspiIOCore = exports.RaspiIOCore = function (_EventEmitter) {\n  _inherits(RaspiIOCore, _EventEmitter);\n\n  function RaspiIOCore(options) {\n    var _Object$definePropert, _Object$definePropert2;\n\n    _classCallCheck(this, RaspiIOCore);\n\n    var _this = _possibleConstructorReturn(this, (RaspiIOCore.__proto__ || Object.getPrototypeOf(RaspiIOCore)).call(this));\n\n    if (!options) {\n      throw new Error('Options are required');\n    }\n    var includePins = options.includePins,\n        excludePins = options.excludePins,\n        enableSerial = options.enableSerial,\n        _options$enableSoftPw = options.enableSoftPwm,\n        enableSoftPwm = _options$enableSoftPw === undefined ? false : _options$enableSoftPw,\n        platform = options.platform;\n\n\n    if (!platform) {\n      throw new Error('\"platform\" option is required');\n    }\n    if (!platform['raspi']) {\n      throw new Error('\"raspi\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-board']) {\n      throw new Error('\"raspi-board\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-gpio']) {\n      throw new Error('\"raspi-gpio\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-i2c']) {\n      throw new Error('\"raspi-i2c\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-led']) {\n      throw new Error('\"raspi-led\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-pwm']) {\n      throw new Error('\"raspi-pwm\" module is missing from \"platform\" option');\n    }\n    if (enableSerial && !platform['raspi-serial']) {\n      throw new Error('\"enableSerial\" is true and \"raspi-serial\" module is missing from \"platform\" option');\n    }\n    if (enableSoftPwm && !platform['raspi-soft-pwm']) {\n      throw new Error('\"enableSoftPwm\" is true and \"raspi-soft-pwm\" module is missing from \"platform\" option');\n    }\n\n    Object.defineProperties(_this, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, raspiModule, {\n      writable: true,\n      value: platform['raspi']\n    }), _defineProperty(_Object$definePropert, raspiBoardModule, {\n      writable: true,\n      value: platform['raspi-board']\n    }), _defineProperty(_Object$definePropert, raspiGpioModule, {\n      writable: true,\n      value: platform['raspi-gpio']\n    }), _defineProperty(_Object$definePropert, raspiI2cModule, {\n      writable: true,\n      value: platform['raspi-i2c']\n    }), _defineProperty(_Object$definePropert, raspiLedModule, {\n      writable: true,\n      value: platform['raspi-led']\n    }), _defineProperty(_Object$definePropert, raspiPwmModule, {\n      writable: true,\n      value: platform['raspi-pwm']\n    }), _defineProperty(_Object$definePropert, raspiSerialModule, {\n      writable: true,\n      value: platform['raspi-serial']\n    }), _defineProperty(_Object$definePropert, raspiSoftPwmModule, {\n      writable: true,\n      value: platform['raspi-soft-pwm']\n    }), _Object$definePropert));\n\n    Object.defineProperties(_this, (_Object$definePropert2 = {\n\n      name: {\n        enumerable: true,\n        value: 'RaspberryPi-IO'\n      }\n\n    }, _defineProperty(_Object$definePropert2, instances, {\n      writable: true,\n      value: []\n    }), _defineProperty(_Object$definePropert2, isReady, {\n      writable: true,\n      value: false\n    }), _defineProperty(_Object$definePropert2, 'isReady', {\n      enumerable: true,\n      get: function get() {\n        return this[isReady];\n      }\n    }), _defineProperty(_Object$definePropert2, pins, {\n      writable: true,\n      value: []\n    }), _defineProperty(_Object$definePropert2, 'pins', {\n      enumerable: true,\n      get: function get() {\n        return this[pins];\n      }\n    }), _defineProperty(_Object$definePropert2, analogPins, {\n      writable: true,\n      value: []\n    }), _defineProperty(_Object$definePropert2, 'analogPins', {\n      enumerable: true,\n      get: function get() {\n        return this[analogPins];\n      }\n    }), _defineProperty(_Object$definePropert2, i2c, {\n      writable: true,\n      value: new _this[raspiI2cModule].I2C()\n    }), _defineProperty(_Object$definePropert2, i2cDelay, {\n      writable: true,\n      value: 0\n    }), _defineProperty(_Object$definePropert2, serialQueue, {\n      value: []\n    }), _defineProperty(_Object$definePropert2, isSerialProcessing, {\n      writable: true,\n      value: false\n    }), _defineProperty(_Object$definePropert2, isSerialOpen, {\n      writable: true,\n      value: false\n    }), _defineProperty(_Object$definePropert2, 'MODES', {\n      enumerable: true,\n      value: Object.freeze({\n        INPUT: INPUT_MODE,\n        OUTPUT: OUTPUT_MODE,\n        ANALOG: ANALOG_MODE,\n        PWM: PWM_MODE,\n        SERVO: SERVO_MODE\n      })\n    }), _defineProperty(_Object$definePropert2, 'HIGH', {\n      enumerable: true,\n      value: HIGH\n    }), _defineProperty(_Object$definePropert2, 'LOW', {\n      enumerable: true,\n      value: LOW\n    }), _defineProperty(_Object$definePropert2, 'defaultLed', {\n      enumerable: true,\n      value: LED_PIN\n    }), _Object$definePropert2));\n\n    if (enableSerial) {\n      var _Object$definePropert3;\n\n      Object.defineProperties(_this, (_Object$definePropert3 = {}, _defineProperty(_Object$definePropert3, raspiSerialModule, {\n        writable: true,\n        value: platform['raspi-serial']\n      }), _defineProperty(_Object$definePropert3, serial, {\n        writable: true,\n        value: new _this[raspiSerialModule].Serial()\n      }), _defineProperty(_Object$definePropert3, 'SERIAL_PORT_IDs', {\n        enumerable: true,\n        value: Object.freeze({\n          HW_SERIAL0: _this[raspiSerialModule].DEFAULT_PORT,\n          DEFAULT: _this[raspiSerialModule].DEFAULT_PORT\n        })\n      }), _Object$definePropert3));\n    } else {\n      Object.defineProperties(_this, {\n\n        SERIAL_PORT_IDs: {\n          enumerable: true,\n          value: Object.freeze({})\n        }\n\n      });\n    }\n\n    _this[raspiModule].init(function () {\n      var pinMappings = _this[raspiBoardModule].getPins();\n      _this[pins] = [];\n\n      // Slight hack to get the LED in there, since it's not actually a pin\n      pinMappings[LED_PIN] = {\n        pins: [LED_PIN],\n        peripherals: ['gpio']\n      };\n\n      if (includePins && excludePins) {\n        throw new Error('\"includePins\" and \"excludePins\" cannot be specified at the same time');\n      }\n\n      if (Array.isArray(includePins)) {\n        var newPinMappings = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = includePins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var pin = _step.value;\n\n            var normalizedPin = _this[raspiBoardModule].getPinNumber(pin);\n            if (normalizedPin === null) {\n              throw new Error('Invalid pin \"' + pin + '\" specified in includePins');\n            }\n            newPinMappings[normalizedPin] = pinMappings[normalizedPin];\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        pinMappings = newPinMappings;\n      } else if (Array.isArray(excludePins)) {\n        pinMappings = Object.assign({}, pinMappings);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = excludePins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _pin = _step2.value;\n\n            var _normalizedPin = _this[raspiBoardModule].getPinNumber(_pin);\n            if (_normalizedPin === null) {\n              throw new Error('Invalid pin \"' + _pin + '\" specified in excludePins');\n            }\n            delete pinMappings[_normalizedPin];\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      Object.keys(pinMappings).forEach(function (pin) {\n        var pinInfo = pinMappings[pin];\n        var supportedModes = [];\n        // We don't want I2C to be used for anything else, since changing the\n        // pin mode makes it unable to ever do I2C again.\n        if (pinInfo.peripherals.indexOf('i2c') == -1 && pinInfo.peripherals.indexOf('uart') == -1) {\n          if (pin == LED_PIN) {\n            supportedModes.push(OUTPUT_MODE);\n          } else if (pinInfo.peripherals.indexOf('gpio') != -1) {\n            supportedModes.push(INPUT_MODE, OUTPUT_MODE);\n          }\n          if (pinInfo.peripherals.indexOf('pwm') != -1) {\n            supportedModes.push(PWM_MODE, SERVO_MODE);\n          } else if (enableSoftPwm === true && pinInfo.peripherals.indexOf('gpio') !== -1) {\n            supportedModes.push(PWM_MODE, SERVO_MODE);\n          }\n        }\n        var instance = _this[instances][pin] = {\n          peripheral: null,\n          mode: supportedModes.indexOf(OUTPUT_MODE) == -1 ? UNKNOWN_MODE : OUTPUT_MODE,\n\n          // Used to cache the previously written value for reading back in OUTPUT mode\n          // We start with undefined because it's in an unknown state\n          previousWrittenValue: undefined,\n\n          // Used to set the default min and max values\n          min: DEFAULT_SERVO_MIN,\n          max: DEFAULT_SERVO_MAX,\n\n          // Used to track if this pin is capable of hardware PWM\n          isHardwarePwm: pinInfo.peripherals.indexOf('pwm') !== -1\n        };\n        _this[pins][pin] = Object.create(null, {\n          supportedModes: {\n            enumerable: true,\n            value: Object.freeze(supportedModes)\n          },\n          mode: {\n            enumerable: true,\n            get: function get() {\n              return instance.mode;\n            }\n          },\n          value: {\n            enumerable: true,\n            get: function get() {\n              switch (instance.mode) {\n                case INPUT_MODE:\n                  return instance.peripheral.read();\n                case OUTPUT_MODE:\n                  return instance.previousWrittenValue;\n                default:\n                  return null;\n              }\n            },\n            set: function set(value) {\n              if (instance.mode == OUTPUT_MODE) {\n                instance.peripheral.write(value);\n              }\n            }\n          },\n          report: {\n            enumerable: true,\n            value: 1\n          },\n          analogChannel: {\n            enumerable: true,\n            value: 127\n          }\n        });\n        if (instance.mode == OUTPUT_MODE) {\n          _this.pinMode(pin, OUTPUT_MODE);\n          _this.digitalWrite(pin, LOW);\n        }\n      });\n\n      // Fill in the holes, sins pins are sparse on the A+/B+/2\n      for (var i = 0; i < _this[pins].length; i++) {\n        if (!_this[pins][i]) {\n          _this[pins][i] = Object.create(null, {\n            supportedModes: {\n              enumerable: true,\n              value: Object.freeze([])\n            },\n            mode: {\n              enumerable: true,\n              get: function get() {\n                return UNKNOWN_MODE;\n              }\n            },\n            value: {\n              enumerable: true,\n              get: function get() {\n                return 0;\n              },\n              set: function set() {}\n            },\n            report: {\n              enumerable: true,\n              value: 1\n            },\n            analogChannel: {\n              enumerable: true,\n              value: 127\n            }\n          });\n        }\n      }\n\n      if (enableSerial) {\n        _this.serialConfig({\n          portId: _this[raspiSerialModule].DEFAULT_PORT,\n          baud: 9600\n        });\n      }\n\n      _this[isReady] = true;\n      _this.emit('ready');\n      _this.emit('connect');\n    });\n    return _this;\n  }\n\n  _createClass(RaspiIOCore, [{\n    key: 'reset',\n    value: function reset() {\n      throw new Error('reset is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'normalize',\n    value: function normalize(pin) {\n      var normalizedPin = this[raspiBoardModule].getPinNumber(pin);\n      if (typeof normalizedPin !== 'number') {\n        throw new Error('Unknown pin \"' + pin + '\"');\n      }\n      return normalizedPin;\n    }\n  }, {\n    key: getPinInstance,\n    value: function value(pin) {\n      var pinInstance = this[instances][pin];\n      if (!pinInstance) {\n        throw new Error('Unknown pin \"' + pin + '\"');\n      }\n      return pinInstance;\n    }\n  }, {\n    key: 'pinMode',\n    value: function pinMode(pin, mode) {\n      this[_pinMode]({ pin: pin, mode: mode });\n    }\n  }, {\n    key: _pinMode,\n    value: function value(_ref) {\n      var pin = _ref.pin,\n          mode = _ref.mode,\n          _ref$pullResistor = _ref.pullResistor,\n          pullResistor = _ref$pullResistor === undefined ? this[raspiGpioModule].PULL_NONE : _ref$pullResistor;\n\n      var normalizedPin = this.normalize(pin);\n      var pinInstance = this[getPinInstance](normalizedPin);\n      pinInstance.pullResistor = pullResistor;\n      var config = {\n        pin: normalizedPin,\n        pullResistor: pinInstance.pullResistor,\n        enableListener: false\n      };\n      if (this[pins][normalizedPin].supportedModes.indexOf(mode) == -1) {\n        var modeName = void 0;\n        switch (mode) {\n          case INPUT_MODE:\n            modeName = 'input';break;\n          case OUTPUT_MODE:\n            modeName = 'output';break;\n          case ANALOG_MODE:\n            modeName = 'analog';break;\n          case PWM_MODE:\n            modeName = 'pwm';break;\n          case SERVO_MODE:\n            modeName = 'servo';break;\n          default:\n            modeName = 'other';break;\n        }\n        throw new Error('Pin \"' + pin + '\" does not support mode \"' + modeName + '\"');\n      }\n\n      if (pin == LED_PIN) {\n        if (pinInstance.peripheral instanceof this[raspiLedModule].LED) {\n          return;\n        }\n        pinInstance.peripheral = new this[raspiLedModule].LED();\n      } else {\n        switch (mode) {\n          case INPUT_MODE:\n            pinInstance.peripheral = new this[raspiGpioModule].DigitalInput(config);\n            break;\n          case OUTPUT_MODE:\n            pinInstance.peripheral = new this[raspiGpioModule].DigitalOutput(config);\n            break;\n          case PWM_MODE:\n          case SERVO_MODE:\n            if (pinInstance.isHardwarePwm) {\n              pinInstance.peripheral = new this[raspiPwmModule].PWM(normalizedPin);\n            } else {\n              pinInstance.peripheral = new this[raspiSoftPwmModule].SoftPWM({\n                pin: normalizedPin,\n                frequency: SOFTWARE_PWM_FREQUENCY,\n                range: SOFTWARE_PWM_RANGE\n              });\n            }\n            break;\n          default:\n            console.warn('Unknown pin mode: ' + mode); // eslint-disable-line no-console\n            break;\n        }\n      }\n      pinInstance.mode = mode;\n    }\n  }, {\n    key: 'analogRead',\n    value: function analogRead() {\n      throw new Error('analogRead is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'analogWrite',\n    value: function analogWrite(pin, value) {\n      this.pwmWrite(pin, value);\n    }\n  }, {\n    key: 'pwmWrite',\n    value: function pwmWrite(pin, value) {\n      var pinInstance = this[getPinInstance](this.normalize(pin));\n      if (pinInstance.mode != PWM_MODE) {\n        this.pinMode(pin, PWM_MODE);\n      }\n      pinInstance.peripheral.write(Math.round(value * pinInstance.peripheral.range / 255));\n    }\n  }, {\n    key: 'digitalRead',\n    value: function digitalRead(pin, handler) {\n      var _this2 = this;\n\n      var pinInstance = this[getPinInstance](this.normalize(pin));\n      if (pinInstance.mode != INPUT_MODE) {\n        this.pinMode(pin, INPUT_MODE);\n      }\n      var interval = setInterval(function () {\n        var value = void 0;\n        if (pinInstance.mode == INPUT_MODE) {\n          value = pinInstance.peripheral.read();\n        } else {\n          value = pinInstance.previousWrittenValue;\n        }\n        if (handler) {\n          handler(value);\n        }\n        _this2.emit('digital-read-' + pin, value);\n      }, DIGITAL_READ_UPDATE_RATE);\n      pinInstance.peripheral.on('destroyed', function () {\n        clearInterval(interval);\n      });\n    }\n  }, {\n    key: 'digitalWrite',\n    value: function digitalWrite(pin, value) {\n      var pinInstance = this[getPinInstance](this.normalize(pin));\n      if (pinInstance.mode === INPUT_MODE && value === HIGH) {\n        this[_pinMode]({ pin: pin, mode: INPUT_MODE, pullResistor: this[raspiGpioModule].PULL_UP });\n      } else if (pinInstance.mode === INPUT_MODE && value === LOW) {\n        this[_pinMode]({ pin: pin, mode: INPUT_MODE, pullResistor: this[raspiGpioModule].PULL_DOWN });\n      } else if (pinInstance.mode != OUTPUT_MODE) {\n        this[_pinMode]({ pin: pin, mode: OUTPUT_MODE });\n      }\n      if (pinInstance.mode === OUTPUT_MODE && value != pinInstance.previousWrittenValue) {\n        pinInstance.peripheral.write(value ? HIGH : LOW);\n        pinInstance.previousWrittenValue = value;\n      }\n    }\n  }, {\n    key: 'servoConfig',\n    value: function servoConfig(pin, min, max) {\n      var config = pin;\n      if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {\n        config = { pin: pin, min: min, max: max };\n      }\n      if (typeof config.min !== 'number') {\n        config.min = DEFAULT_SERVO_MIN;\n      }\n      if (typeof config.max !== 'number') {\n        config.max = DEFAULT_SERVO_MAX;\n      }\n      var normalizedPin = this.normalize(pin);\n      this[_pinMode]({\n        pin: normalizedPin,\n        mode: SERVO_MODE\n      });\n      var pinInstance = this[getPinInstance](this.normalize(normalizedPin));\n      pinInstance.min = config.min;\n      pinInstance.max = config.max;\n    }\n  }, {\n    key: 'servoWrite',\n    value: function servoWrite(pin, value) {\n      var pinInstance = this[getPinInstance](this.normalize(pin));\n      if (pinInstance.mode != SERVO_MODE) {\n        this.pinMode(pin, SERVO_MODE);\n      }\n      var dutyCycle = (pinInstance.min + value / 180 * (pinInstance.max - pinInstance.min)) / 20000;\n      pinInstance.peripheral.write(dutyCycle * pinInstance.peripheral.range);\n    }\n  }, {\n    key: 'queryCapabilities',\n    value: function queryCapabilities(cb) {\n      if (this.isReady) {\n        process.nextTick(cb);\n      } else {\n        this.on('ready', cb);\n      }\n    }\n  }, {\n    key: 'queryAnalogMapping',\n    value: function queryAnalogMapping(cb) {\n      if (this.isReady) {\n        process.nextTick(cb);\n      } else {\n        this.on('ready', cb);\n      }\n    }\n  }, {\n    key: 'queryPinState',\n    value: function queryPinState(pin, cb) {\n      if (this.isReady) {\n        process.nextTick(cb);\n      } else {\n        this.on('ready', cb);\n      }\n    }\n  }, {\n    key: i2cCheckAlive,\n    value: function value() {\n      if (!this[i2c].alive) {\n        throw new Error('I2C pins not in I2C mode');\n      }\n    }\n  }, {\n    key: 'i2cConfig',\n    value: function i2cConfig(options) {\n      var delay = void 0;\n\n      if (typeof options === 'number') {\n        delay = options;\n      } else {\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null) {\n          delay = options.delay;\n        }\n      }\n\n      this[i2cCheckAlive]();\n\n      this[i2cDelay] = Math.round((delay || 0) / 1000);\n\n      return this;\n    }\n  }, {\n    key: 'i2cWrite',\n    value: function i2cWrite(address, cmdRegOrData, inBytes) {\n      this[i2cCheckAlive]();\n\n      // If i2cWrite was used for an i2cWriteReg call...\n      if (arguments.length === 3 && !Array.isArray(cmdRegOrData) && !Array.isArray(inBytes)) {\n        return this.i2cWriteReg(address, cmdRegOrData, inBytes);\n      }\n\n      // Fix arguments if called with Firmata.js API\n      if (arguments.length === 2) {\n        if (Array.isArray(cmdRegOrData)) {\n          inBytes = cmdRegOrData.slice();\n          cmdRegOrData = inBytes.shift();\n        } else {\n          inBytes = [];\n        }\n      }\n\n      var buffer = new Buffer([cmdRegOrData].concat(inBytes));\n\n      // Only write if bytes provided\n      if (buffer.length) {\n        this[i2c].writeSync(address, buffer);\n      }\n\n      return this;\n    }\n  }, {\n    key: 'i2cWriteReg',\n    value: function i2cWriteReg(address, register, value) {\n      this[i2cCheckAlive]();\n\n      this[i2c].writeByteSync(address, register, value);\n\n      return this;\n    }\n  }, {\n    key: _i2cRead,\n    value: function value(continuous, address, register, bytesToRead, callback) {\n      var _this3 = this;\n\n      this[i2cCheckAlive]();\n\n      // Fix arguments if called with Firmata.js API\n      if (arguments.length == 4 && typeof register == 'number' && typeof bytesToRead == 'function') {\n        callback = bytesToRead;\n        bytesToRead = register;\n        register = null;\n      }\n\n      callback = typeof callback === 'function' ? callback : function () {};\n\n      var event = 'i2c-reply-' + address + '-';\n      event += register !== null ? register : 0;\n\n      var read = function read() {\n        var afterRead = function afterRead(err, buffer) {\n          if (err) {\n            return _this3.emit('error', err);\n          }\n\n          // Convert buffer to Array before emit\n          _this3.emit(event, Array.prototype.slice.call(buffer));\n\n          if (continuous) {\n            setTimeout(read, _this3[i2cDelay]);\n          }\n        };\n\n        _this3.once(event, callback);\n\n        if (register !== null) {\n          _this3[i2c].read(address, register, bytesToRead, afterRead);\n        } else {\n          _this3[i2c].read(address, bytesToRead, afterRead);\n        }\n      };\n\n      setTimeout(read, this[i2cDelay]);\n\n      return this;\n    }\n  }, {\n    key: 'i2cRead',\n    value: function i2cRead() {\n      for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n        rest[_key] = arguments[_key];\n      }\n\n      return this[_i2cRead].apply(this, [true].concat(rest));\n    }\n  }, {\n    key: 'i2cReadOnce',\n    value: function i2cReadOnce() {\n      for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        rest[_key2] = arguments[_key2];\n      }\n\n      return this[_i2cRead].apply(this, [false].concat(rest));\n    }\n  }, {\n    key: 'sendI2CConfig',\n    value: function sendI2CConfig() {\n      return this.i2cConfig.apply(this, arguments);\n    }\n  }, {\n    key: 'sendI2CWriteRequest',\n    value: function sendI2CWriteRequest() {\n      return this.i2cWrite.apply(this, arguments);\n    }\n  }, {\n    key: 'sendI2CReadRequest',\n    value: function sendI2CReadRequest() {\n      return this.i2cReadOnce.apply(this, arguments);\n    }\n  }, {\n    key: 'serialConfig',\n    value: function serialConfig(_ref2) {\n      var portId = _ref2.portId,\n          baud = _ref2.baud;\n\n      if (!this[raspiSerialModule]) {\n        throw new Error('Serial support is disabled');\n      }\n      if (!this[isSerialOpen] || baud && baud !== this[serial].baudRate) {\n        this[addToSerialQueue]({\n          type: SERIAL_ACTION_CONFIG,\n          portId: portId,\n          baud: baud\n        });\n      }\n    }\n  }, {\n    key: 'serialWrite',\n    value: function serialWrite(portId, inBytes) {\n      if (!this[raspiSerialModule]) {\n        throw new Error('Serial support is disabled');\n      }\n      this[addToSerialQueue]({\n        type: SERIAL_ACTION_WRITE,\n        portId: portId,\n        inBytes: inBytes\n      });\n    }\n  }, {\n    key: 'serialRead',\n    value: function serialRead(portId, maxBytesToRead, handler) {\n      if (!this[raspiSerialModule]) {\n        throw new Error('Serial support is disabled');\n      }\n      if (typeof maxBytesToRead === 'function') {\n        handler = maxBytesToRead;\n        maxBytesToRead = undefined;\n      }\n      this[addToSerialQueue]({\n        type: SERIAL_ACTION_READ,\n        portId: portId,\n        maxBytesToRead: maxBytesToRead,\n        handler: handler\n      });\n    }\n  }, {\n    key: 'serialStop',\n    value: function serialStop(portId) {\n      if (!this[raspiSerialModule]) {\n        throw new Error('Serial support is disabled');\n      }\n      this[addToSerialQueue]({\n        type: SERIAL_ACTION_STOP,\n        portId: portId\n      });\n    }\n  }, {\n    key: 'serialClose',\n    value: function serialClose(portId) {\n      if (!this[raspiSerialModule]) {\n        throw new Error('Serial support is disabled');\n      }\n      this[addToSerialQueue]({\n        type: SERIAL_ACTION_CLOSE,\n        portId: portId\n      });\n    }\n  }, {\n    key: 'serialFlush',\n    value: function serialFlush(portId) {\n      if (!this[raspiSerialModule]) {\n        throw new Error('Serial support is disabled');\n      }\n      this[addToSerialQueue]({\n        type: SERIAL_ACTION_FLUSH,\n        portId: portId\n      });\n    }\n  }, {\n    key: addToSerialQueue,\n    value: function value(action) {\n      if (action.portId !== this[raspiSerialModule].DEFAULT_PORT) {\n        throw new Error('Invalid serial port \"' + action.portId + '\"');\n      }\n      this[serialQueue].push(action);\n      this[serialPump]();\n    }\n  }, {\n    key: serialPump,\n    value: function value() {\n      var _this4 = this;\n\n      if (this[isSerialProcessing] || !this[serialQueue].length) {\n        return;\n      }\n      this[isSerialProcessing] = true;\n      var action = this[serialQueue].shift();\n      var finalize = function finalize() {\n        _this4[isSerialProcessing] = false;\n        _this4[serialPump]();\n      };\n      switch (action.type) {\n        case SERIAL_ACTION_WRITE:\n          if (!this[isSerialOpen]) {\n            throw new Error('Cannot write to closed serial port');\n          }\n          this[serial].write(action.inBytes, finalize);\n          break;\n\n        case SERIAL_ACTION_READ:\n          if (!this[isSerialOpen]) {\n            throw new Error('Cannot read from closed serial port');\n          }\n          // TODO: add support for action.maxBytesToRead\n          this[serial].on('data', function (data) {\n            action.handler(bufferToArray(data));\n          });\n          process.nextTick(finalize);\n          break;\n\n        case SERIAL_ACTION_STOP:\n          if (!this[isSerialOpen]) {\n            throw new Error('Cannot stop closed serial port');\n          }\n          this[serial].removeAllListeners();\n          process.nextTick(finalize);\n          break;\n\n        case SERIAL_ACTION_CONFIG:\n          this[serial].close(function () {\n            _this4[serial] = new _this4[raspiSerialModule].Serial({\n              baudRate: action.baud\n            });\n            _this4[serial].open(function () {\n              _this4[serial].on('data', function (data) {\n                _this4.emit('serial-data-' + action.portId, bufferToArray(data));\n              });\n              _this4[isSerialOpen] = true;\n              finalize();\n            });\n          });\n          break;\n\n        case SERIAL_ACTION_CLOSE:\n          this[serial].close(function () {\n            _this4[isSerialOpen] = false;\n            finalize();\n          });\n          break;\n\n        case SERIAL_ACTION_FLUSH:\n          if (!this[isSerialOpen]) {\n            throw new Error('Cannot flush closed serial port');\n          }\n          this[serial].flush(finalize);\n          break;\n\n        default:\n          throw new Error('Internal error: unknown serial action type');\n      }\n    }\n  }, {\n    key: 'sendOneWireConfig',\n    value: function sendOneWireConfig() {\n      throw new Error('sendOneWireConfig is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireSearch',\n    value: function sendOneWireSearch() {\n      throw new Error('sendOneWireSearch is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireAlarmsSearch',\n    value: function sendOneWireAlarmsSearch() {\n      throw new Error('sendOneWireAlarmsSearch is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireRead',\n    value: function sendOneWireRead() {\n      throw new Error('sendOneWireRead is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireReset',\n    value: function sendOneWireReset() {\n      throw new Error('sendOneWireConfig is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireWrite',\n    value: function sendOneWireWrite() {\n      throw new Error('sendOneWireWrite is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireDelay',\n    value: function sendOneWireDelay() {\n      throw new Error('sendOneWireDelay is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'sendOneWireWriteAndRead',\n    value: function sendOneWireWriteAndRead() {\n      throw new Error('sendOneWireWriteAndRead is not supported on the Raspberry Pi');\n    }\n  }, {\n    key: 'setSamplingInterval',\n    value: function setSamplingInterval() {\n      throw new Error('setSamplingInterval is not yet implemented');\n    }\n  }, {\n    key: 'reportAnalogPin',\n    value: function reportAnalogPin() {\n      throw new Error('reportAnalogPin is not yet implemented');\n    }\n  }, {\n    key: 'reportDigitalPin',\n    value: function reportDigitalPin() {\n      throw new Error('reportDigitalPin is not yet implemented');\n    }\n  }, {\n    key: 'pingRead',\n    value: function pingRead() {\n      throw new Error('pingRead is not yet implemented');\n    }\n  }, {\n    key: 'pulseIn',\n    value: function pulseIn() {\n      throw new Error('pulseIn is not yet implemented');\n    }\n  }, {\n    key: 'stepperConfig',\n    value: function stepperConfig() {\n      throw new Error('stepperConfig is not yet implemented');\n    }\n  }, {\n    key: 'stepperStep',\n    value: function stepperStep() {\n      throw new Error('stepperStep is not yet implemented');\n    }\n  }]);\n\n  return RaspiIOCore;\n}(_events.EventEmitter);\n"}